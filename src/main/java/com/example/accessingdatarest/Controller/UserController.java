package com.example.accessingdatarest.Controller;

import com.example.accessingdatarest.Model.User;
import com.example.accessingdatarest.Repositories.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

@Controller // This means that this class is a Controller
@RequestMapping(path="/user") // This means URL's start with /demo (after Application path)
public class UserController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;

    @PostMapping(path="/regUser") // Map ONLY POST Requests
    public @ResponseBody String addNewUser (@RequestBody User user) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request
        try {
            User n = new User();
            n.setName(user.getName());
            n.setEmail(user.getEmail());
            n.setPassword(user.getPassword());
            userRepository.save(n);
            return "Saved";
        }
        catch (Exception ex)
        {
            return "Login already exist!";
        }
    }
    @PostMapping(path="/authorize") // Map ONLY POST Requests
    public @ResponseBody String authorize (@RequestParam String login,@RequestParam String password) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request
        try {
            int f=0;
          Iterable<User> allUsers=  userRepository.findAll();
            for (User element : allUsers)
            {
                if (element.getName().equals(login) && element.getPassword().equals(password)) {
                    return "Authorized";
                }

            }
            return "Not authorized";
        }
        catch (Exception ex)
        {
            return ex.toString();
        }
    }
    @PostMapping(path="/delete") // Map ONLY POST Requests
    public @ResponseBody String deleteUser (@RequestParam int id) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request


        userRepository.deleteById(id);
        return "User deleted !";
    }
    @PostMapping(path="/updateName") // Map ONLY POST Requests
    public @ResponseBody String updateName (@RequestParam int id,@RequestParam String login) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        User item=userRepository.findById(id).get();
        item.setName(login);
        userRepository.save(item);
        return "User login updated !";
    }
    @PostMapping(path="/updateEmail") // Map ONLY POST Requests
    public @ResponseBody String updateEmail (@RequestParam int id,@RequestParam String email) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        User item=userRepository.findById(id).get();
        item.setEmail(email);
        userRepository.save(item);
        return "User email updated !";
    }


    @GetMapping(path="/all")
    public @ResponseBody Iterable<User> getAllUsers() {
        // This returns a JSON or XML with the users
        return userRepository.findAll();
    }
}